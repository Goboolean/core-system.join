// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: query-server.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StockFetcher_FetchStockAggs_FullMethodName = "/api.StockFetcher/FetchStockAggs"
)

// StockFetcherClient is the client API for StockFetcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockFetcherClient interface {
	FetchStockAggs(ctx context.Context, in *StockFetchRequest, opts ...grpc.CallOption) (StockFetcher_FetchStockAggsClient, error)
}

type stockFetcherClient struct {
	cc grpc.ClientConnInterface
}

func NewStockFetcherClient(cc grpc.ClientConnInterface) StockFetcherClient {
	return &stockFetcherClient{cc}
}

func (c *stockFetcherClient) FetchStockAggs(ctx context.Context, in *StockFetchRequest, opts ...grpc.CallOption) (StockFetcher_FetchStockAggsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StockFetcher_ServiceDesc.Streams[0], StockFetcher_FetchStockAggs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stockFetcherFetchStockAggsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StockFetcher_FetchStockAggsClient interface {
	Recv() (*StockFetchResponse, error)
	grpc.ClientStream
}

type stockFetcherFetchStockAggsClient struct {
	grpc.ClientStream
}

func (x *stockFetcherFetchStockAggsClient) Recv() (*StockFetchResponse, error) {
	m := new(StockFetchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StockFetcherServer is the server API for StockFetcher service.
// All implementations must embed UnimplementedStockFetcherServer
// for forward compatibility
type StockFetcherServer interface {
	FetchStockAggs(*StockFetchRequest, StockFetcher_FetchStockAggsServer) error
	mustEmbedUnimplementedStockFetcherServer()
}

// UnimplementedStockFetcherServer must be embedded to have forward compatible implementations.
type UnimplementedStockFetcherServer struct {
}

func (UnimplementedStockFetcherServer) FetchStockAggs(*StockFetchRequest, StockFetcher_FetchStockAggsServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchStockAggs not implemented")
}
func (UnimplementedStockFetcherServer) mustEmbedUnimplementedStockFetcherServer() {}

// UnsafeStockFetcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockFetcherServer will
// result in compilation errors.
type UnsafeStockFetcherServer interface {
	mustEmbedUnimplementedStockFetcherServer()
}

func RegisterStockFetcherServer(s grpc.ServiceRegistrar, srv StockFetcherServer) {
	s.RegisterService(&StockFetcher_ServiceDesc, srv)
}

func _StockFetcher_FetchStockAggs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StockFetchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StockFetcherServer).FetchStockAggs(m, &stockFetcherFetchStockAggsServer{stream})
}

type StockFetcher_FetchStockAggsServer interface {
	Send(*StockFetchResponse) error
	grpc.ServerStream
}

type stockFetcherFetchStockAggsServer struct {
	grpc.ServerStream
}

func (x *stockFetcherFetchStockAggsServer) Send(m *StockFetchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StockFetcher_ServiceDesc is the grpc.ServiceDesc for StockFetcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockFetcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.StockFetcher",
	HandlerType: (*StockFetcherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchStockAggs",
			Handler:       _StockFetcher_FetchStockAggs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "query-server.proto",
}
